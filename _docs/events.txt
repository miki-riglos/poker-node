Round
-----
emit('start')
emit('error') //TODO
emit('next')
emit('raise', {position: position, amount: amount, type: type})
emit('call' , {position: position, amount: amount});
emit('check', {position: position});
emit('fold' , {position: position});
emit('end'  )

Game
----
emit('start')
emit('round-start')
emit('round-error') //TODO
emit('round-next')
emit('round-raise', evt);
emit('round-call' , evt);
emit('round-check', evt);
emit('round-fold' , evt);
emit('round-end';
emit('end'  )

Tournament
----------
emit('tournament-start' , this);
emit('tournament-error' , this);
emit('tournament-button', this)
emit('game-start'       , this)
emit('round-start'      , this)
emit('round-error'      , this) //TODO
emit('round-next'       , this)
emit('round-raise'      , this, evt);
emit('round-call'       , this, evt);
emit('round-check'      , this, evt);
emit('round-fold'       , this, evt);
emit('round-end'        , this)
emit('game-end'         , this)
emit('tournament-end'   , this);


Synchronicity
=============
tournament.start()                                -> emit('tournament-start')
tournament.startGame()
  game = new Game()
    game.start()                                  -> emit('game-start')
    game.startRound()
      game.round = new Round()
        round.start()                             -> emit('round-start')
        round.nextPosition();                     -> emit('round-next')   <- async finish if not preflop
        if preflop
          round.raise(sb)                         -> emit('round-next')
          round.raise(bb)                         -> emit('round-next')   <- async finish if preflop
        ...
        if another action
          round.nextPosition();                   -> emit('round-next')
        else                                       or
          round.end()                             -> emit('round-end')
      game.round.on('end')
        if another round
          process.nextTick game.startRound()      -> async
        else                                       or
          game.end()                              -> emit('game-end')
    game.on('end')
      if another game
        process.nextTick tournament.startGame()   -> async
      else                                         or
        tournament.end()                          -> emit('game-end')
